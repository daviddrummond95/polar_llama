name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

  cancel-in-progress: true

permissions:
  contents: read

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  linux_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        run: rustup show
      - uses: mozilla-actions/sccache-action@v0.0.3
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install maturin
      
      # Build and install the package directly with maturin
      - name: Build and install package
        run: |
          maturin develop --release
      
      # Run pre-commit checks
      - name: Run pre-commit checks
        run: |
          cargo fmt --all && cargo clippy --all-features
          python -m ruff check . --fix || true
          if [ -d "polar_llama" ]; then
            python -m ruff format polar_llama || true
          fi
          if [ -d "tests" ]; then
            python -m ruff format tests || true
          fi
          if [ -d "polar_llama" ] && [ -d "tests" ]; then
            python -m mypy --ignore-missing-imports polar_llama tests || true
          elif [ -d "polar_llama" ]; then
            python -m mypy --ignore-missing-imports polar_llama || true
          elif [ -d "tests" ]; then
            python -m mypy --ignore-missing-imports tests || true
          fi
      
      # Run tests
      - name: Run tests
        run: |
          python -m pytest tests

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl libssl-dev pkg-config

      # Most basic approach for building wheels, using the stable manylinux image
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          architecture: ${{ matrix.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  release:
    name: Release
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
          
      - name: List distribution files
        run: ls -la dist/
          
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*
